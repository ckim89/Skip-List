Intermediate Programming 600.120

   Project 3
   ---------
1. Design and develop a repository based on the Super List
   data structure presented in class.

   An exact definition of the repository access functions is
   given in the file sl_repository.h (which should not be changed).

   A Makefile and a program C file for project3 is provided. However, the
   program should be modified to receive its input parameters as
   command line arguments (see below).

   You should implement a super list version of the 5 repository 
   access functions that should reside in a new file sl_repository.c :

1.  void repository_init( int p ) 
    - should initialize the Super List repository, setting the
      Super List probability constant to p percent (e.g 50 for 50 percent).

2.  int  repository_insert( int key, int data )
    - inserts a {key, data} record into the repository, sorted according
      to the key. Each key should only appear at most once in the repository.
      The operation should return 1 if the {key, data} record was inserted,
      return 0 if the record was not inserted (because there was already
      a record with the same key in the repository), and -1 if the
      operation had a problem completing correctly. 

3.  int repository_delete( int key )
    - removes a record with the given key from the repository if such exists.
      The operation should return 1 if such record was removed and 
      0 if there was no such record in the repository. 
 
4.  int repository_get( int key, int *data )
    - gets a record with a specific key from the repository and stores its
      data into the data parameter, if such a record exists.
      The operation should return 1 if the record was found in the 
      Repository and 0 if the record was not found. 

5.  void repository_print( int print_elements )
    - For all values of print_elements, the function prints the number of 
      unique records in the repository, the total number of records in each 
      level of the Super List structure, the current number of levels in the 
      Super List, and the number of 'next' steps performed so far (see below). 
      If print_elements is 1, the function should also print the list of unique
      records in the repository. If print_elements is 2, the function should
      print the list of records in each level of the repository in a way that
      nicely presents the super list structure (think about how to do this).
      Otherwise, the function should not print the specific records.

   A counter should maintain the number of steps performed on the Super list.      
   The counter should be initialized to 0 and should be incremented each time 
   a pointer is set to point to another record in any level of the Super List. 
   This gives an indication of how much effort was spent so far.
1.a  Run it with numbers between 1..10, for 1000 operations, 
     printing (print_element = 2 ) every 100 operations.
1.b  Run it with numbers between 1..100, for 10,000 operations, 
     printing (print_element = 2 ) every 1000 operations.
1.c  Run it with numbers between 1..100, for 1,000,000 operations, 
     printing (print_element = 1 ) every 100,000 operations.
1.d  Run it with numbers between 1..1000, for 10,000,000 operations, 
     printing (print_element = 0 ) every 1,000,000 operations. 
1.e  Run it with numbers between 1..1000, for 100,000,000 operations, 
     printing (print_element = 0 ) every 10,000,000 operations. 
1.f  Run it with numbers between 1..10000, for 20,000,000 operations, 
     printing (print_element = 0 ) every 2,000,000 operations. 

2.   Re-run 1.d, 1.e, and 1.f with 5 different seeds {1,3,5,7,9} each. 
     Include in your document the number of steps in each case and calculate
     the average number of steps for 1.d, 1.e, and 1.f respectively. 
     Please explain the results.

3.   In a standard Super List (1.a-1.f, 2) p=50%, the probability
     used when randomizing level instantiation upon insertion. 
     Re-run 1.d with p=25% and also with p=75% instead. Include the number of 
     steps in each case with 5 different seeds {1,3,5,7,9}. Calculate 
     the average number of steps. 

Note: All through this project, you MUST use the rand100 related functions 
      (see rand100.h) to randomize on the p parameter of the Super List. 
      The Get_next_op function should be the only function that uses the
      usual rand functions from Projects 1 and 2. This is done to create
      a separation between the random number streams so that your results
      for 1.a to 1.d will be similar in terms of the {key, value} pairs
      to a reference executable (ref_project3) that is provided.

Input parameters: The program should receive the following (optional) 
input parameters, in any order, with the following defaults, 
as command line parameters:

 -r <max range> with a default of 100 (for numbers between 1..100)
 -o <operations> with a default of 1,000,000 (for the number of operations).
 -s <seed> with a default of 1, for the starting seed.
 -p <probability percentage> with a default of 50.

The program should exit after completing the run.

Please come to class on Friday (2/28) with an initial design, 
and to class on Monday (3/3) with a complete, typed design. Please try hard to 
complete your implementation of the Super List by Sunday 3/9.

Submission date of a complete project including design document, code,
and results is: Thursday March 13, noon.

Submission is accomplished by e-mailing a tar file to cs120@cs.jhu.edu.
Please do not include executable/object files or cores in your
tar (include only the files you want to submit)

The development environment and the place where you have to check your
program is *only* on the ugrad1-20 machines. 
